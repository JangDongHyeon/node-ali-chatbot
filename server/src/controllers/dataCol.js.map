{"version":3,"sources":["dataCol.js"],"names":["chatSelectionsFun","req","res","text","body","DataChat","user","_id","axios","post","question","resopne","console","log","data","status","json","error","message","msg","chatDataColFun","chatDataColRoom","DataColRoom","room","save","chatDataColGet","DataColChat","find","simsimroom","sort","date","chat","dataColRoomById","next","id","findById","match","dataCol"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport DataColChat from '../models/DataColChat';\r\nimport DataColRoom from '../models/DataColRoom';\r\n\r\n\r\n\r\nexport const chatSelectionsFun = async (req, res) => {\r\n    try {\r\n        const {\r\n            text\r\n        } = req.body;\r\n\r\n        await new DataChat({\r\n            text,\r\n            user: req.user._id,\r\n        });\r\n\r\n        const resopne = await axios.post('http://155.230.24.126:3050/returnchatselections', {\r\n            question: text,\r\n        });\r\n\r\n        console.log(resopne.data);\r\n        res.status(200).json(resopne.data);\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).json({\r\n            msg: 'server error',\r\n        });\r\n    }\r\n};\r\n\r\nexport const chatDataColFun = async (req, res) => {\r\n    try {\r\n        const {\r\n            text\r\n        } = req.body;\r\n\r\n        await new DataChat({\r\n            text,\r\n            user: req.user._id,\r\n        });\r\n\r\n        const resopne = await axios.post('http://155.230.24.126:3050/returnchatselections', {\r\n            question: text,\r\n        });\r\n\r\n        console.log(resopne.data);\r\n        res.status(200).json(resopne.data);\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).json({\r\n            msg: 'server error',\r\n        });\r\n    }\r\n};\r\n\r\nexport const chatDataColRoom = async (req, res) => {\r\n    try {\r\n        const room = await new DataColRoom({\r\n            user: req.user._id,\r\n        });\r\n        await room.save();\r\n\r\n        res.json(room._id);\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).json({\r\n            msg: 'server error',\r\n        });\r\n    }\r\n};\r\n\r\nexport const chatDataColGet = async (req, res) => {\r\n    try {\r\n        const chat = await DataColChat.find({\r\n            user: req.user._id,\r\n            room: req.simsimroom._id,\r\n        }).sort({\r\n            date: 1,\r\n        });\r\n\r\n        res.json(chat);\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).json({\r\n            msg: 'server error',\r\n        });\r\n    }\r\n};\r\n\r\nexport const dataColRoomById = async (req, res, next, id) => {\r\n    try {\r\n        const room = await DataColRoom.findById(id);\r\n        if (!id.match(/^[0-9a-fA-F]{24}$/) || !room) {\r\n            return res.status(404).json({\r\n                msg: 'Room not found',\r\n            });\r\n        }\r\n\r\n        req.dataCol = room;\r\n        next();\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(400).json({\r\n            msg: 'Server Error',\r\n        });\r\n    }\r\n};"],"file":"dataCol.js"}