{"version":3,"sources":["auth.js"],"names":["dotenv","config","exports","signup","req","res","User","findOne","email","body","userFind","console","log","status","json","msg","user","brcypt","genSalt","salt","hash","password","save","token","jwt","sign","_id","process","env","JWT_SECRET","cookie","expire","Date","undefined","error","message","signin","compare","isMatch","signout","clearCookie","err","requireSignin","secret","userProperty","isAuth","next","profile","toString"],"mappings":"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","sourcesContent":["import User from '../models/User';\r\nimport jwt from 'jsonwebtoken'; // to generate signed token\r\nimport expressJwt from 'express-jwt'; // for authorization check\r\n\r\nimport brcypt from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nexports.signup = async (req, res) => {\r\n    try {\r\n\r\n        const userFind = await User.findOne({\r\n            email: req.body.email,\r\n        });\r\n        console.log(userFind);\r\n        console.log(req.body.email);\r\n\r\n        if (userFind) {\r\n            return res.status(400).json({\r\n                msg: 'User use email',\r\n            });\r\n        }\r\n        const user = new User(req.body);\r\n        const salt = await brcypt.genSalt(10);\r\n\r\n        user.password = await brcypt.hash(user.password, salt);\r\n\r\n        await user.save();\r\n        const token = jwt.sign({\r\n                _id: user._id,\r\n            },\r\n            process.env.JWT_SECRET\r\n        );\r\n        res.cookie('t', token, {\r\n            expire: new Date() + 9999,\r\n        });\r\n\r\n        user.password = undefined;\r\n        return res.json({\r\n            token: 'Bearer ' + token,\r\n            user\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).json({\r\n            msg: \"server error\",\r\n        });\r\n    }\r\n};\r\n\r\nexports.signin = async (req, res) => {\r\n    try {\r\n        //find the user based on email\r\n        const {\r\n            email,\r\n            password\r\n        } = req.body;\r\n\r\n        const user = await User.findOne({\r\n            email,\r\n        });\r\n\r\n        if (!user) {\r\n            return res.status(400).json({\r\n                msg: 'User with that email does not exist. Please Signup',\r\n            });\r\n        }\r\n\r\n        const isMatch = await brcypt.compare(password, user.password);\r\n\r\n        if (!isMatch) {\r\n            res.status(400).json({\r\n                msg: 'Email and Password dont match',\r\n            });\r\n        }\r\n        const token = jwt.sign({\r\n                _id: user._id,\r\n            },\r\n            process.env.JWT_SECRET\r\n        );\r\n\r\n        res.cookie('t', token, {\r\n            expire: new Date() + 9999,\r\n        });\r\n\r\n\r\n        user.password = undefined;\r\n\r\n\r\n        res.json({\r\n            token: 'Bearer ' + token,\r\n            user\r\n        });\r\n\r\n    } catch (err) {\r\n        console.error(err.message);\r\n        res.status(500).json({\r\n            msg: \"server error\",\r\n        });\r\n    }\r\n};\r\n\r\nexports.signout = (req, res) => {\r\n    try {\r\n        res.clearCookie('t');\r\n        res.json({\r\n            msg: 'Signout success',\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(400).json({\r\n            msg: 'Server Error',\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexports.requireSignin = expressJwt({\r\n    secret: process.env.JWT_SECRET,\r\n    userProperty: 'auth',\r\n});\r\n\r\nexports.isAuth = (req, res, next) => {\r\n    try {\r\n        let user = req.profile && req.user && req.profile._id.toString() === req.user._id.toString();\r\n        if (!user) {\r\n            return res.status(403).json({\r\n                msg: 'Access denid'\r\n            });\r\n        }\r\n        next();\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(400).json({\r\n            msg: 'Server Error'\r\n        })\r\n    }\r\n}"],"file":"auth.js"}