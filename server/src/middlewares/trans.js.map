{"version":3,"sources":["trans.js"],"names":["trans","text","pattern_eng","test","from","to","engine","key","transText","result","transPromi","chat","Promise","all","map","item"],"mappings":"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","sourcesContent":["import translate from 'translate';\r\n\r\nexport const trans = async (text, trans) => {\r\n\r\n    let pattern_eng = /[a-zA-Z]/;\r\n    let result;\r\n    if (pattern_eng.test(text)) {\r\n        let transText = await translate(text, { from: 'en', to: trans, engine: 'google', key: 'AIzaSyA3_mho1bAmJF3I1rLiOPE8MoKOiwv_jhA' })\r\n        if (transText !== text)\r\n            result = text + '>>' + transText;\r\n        else result = transText\r\n    } else {\r\n        let transText = await translate(text, { from: 'ko', to: trans, engine: 'google', key: 'AIzaSyA3_mho1bAmJF3I1rLiOPE8MoKOiwv_jhA' })\r\n\r\n        if (transText !== text)\r\n            result = text + '>>' + transText;\r\n        else result = transText\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const transPromi = async (chat, trans) => {\r\n    let pattern_eng = /[a-zA-Z]/;\r\n    let result;\r\n\r\n    result = await Promise.all(chat.map(async item => {\r\n        if (pattern_eng.test(item.text)) {\r\n\r\n            let transText = await translate(item.text, { from: 'en', to: trans, engine: 'google', key: 'AIzaSyA3_mho1bAmJF3I1rLiOPE8MoKOiwv_jhA' })\r\n            if (transText !== item.text)\r\n                item.text = item.text + '>>' + transText;\r\n            return item\r\n\r\n        } else {\r\n\r\n            let transText = await translate(item.text, { from: 'ko', to: trans, engine: 'google', key: 'AIzaSyA3_mho1bAmJF3I1rLiOPE8MoKOiwv_jhA' })\r\n            if (transText !== item.text)\r\n                item.text = item.text + '>>' + transText;\r\n            return item\r\n        }\r\n\r\n    }));\r\n\r\n    return result;\r\n}\r\n\r\n"],"file":"trans.js"}